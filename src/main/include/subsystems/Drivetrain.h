// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.
#pragma once

#include <frc2/command/SubsystemBase.h>
#include <frc/drive/DifferentialDrive.h>
#include <frc/motorcontrol/MotorControllerGroup.h>
#include <frc/DigitalInput.h>

#include <ctre/phoenix.h>

#include "Constants.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Drivetrain: public frc2::SubsystemBase {
private:
    // It's desirable that everything possible is private except
    // for methods that implement subsystem capabilities

    WPI_VictorSPX m_leftFrontController{Porterbots::CAN_ID::kMotorLeftFrontID};
    WPI_VictorSPX m_leftRearController{Porterbots::CAN_ID::kMotorLeftRearID};

    WPI_VictorSPX m_rightFrontController{Porterbots::CAN_ID::kMotorRightFrontID};
    WPI_VictorSPX m_rightRearController{Porterbots::CAN_ID::kMotorRightRearID};

    frc::MotorControllerGroup m_leftSideMotors{m_leftFrontController, m_leftRearController};
    frc::MotorControllerGroup m_rightSideMotors{m_rightFrontController, m_rightRearController};    

    frc::DifferentialDrive m_differentialDrive{m_leftFrontController, m_rightFrontController};

    // used to block operator input during command execution
    bool    m_supressManualControl = false;

    // line sensors live here since they are integral to the drive system and only used by the drive system
    frc::DigitalInput m_rightLineSensor{Porterbots::LineDetection::kRightLineSensor};
    frc::DigitalInput m_leftLineSensor{Porterbots::LineDetection::kLeftLineSensor};


public:
    Drivetrain();

    void DrivetrainTankMove(double, double, bool);
    void DrivetrainArcadeMove(double, double, bool);

    bool IsLineDetected(int sensor);

    void SetAllowOperatorCommands(bool);
    bool GetAllowOperatorCommands();

    void Periodic() override;
    void SimulationPeriodic() override;
};

